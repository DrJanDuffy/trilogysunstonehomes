# 🚀 Enterprise Next.js Deployment Workflow
#
# Features:
# - Multi-stage CI/CD pipeline with parallel job execution
# - Comprehensive testing (unit, e2e, visual regression, accessibility)
# - Advanced security scanning (deps, SAST, secrets)
# - Performance optimization and monitoring
# - Smart caching and build acceleration
# - Preview deployments for PRs
# - Sophisticated deployment strategies with health checks
# - Comprehensive notifications and reporting
#
name: 🚀 Enterprise Next.js Deployment

on:
  push:
    branches: [main, develop]
    paths-ignore:
      - "**.md"
      - "docs/**"
      - ".github/ISSUE_TEMPLATE/**"
  
  pull_request:
    branches: [main, develop]
    paths-ignore:
      - "**.md"
      - "docs/**"
      - ".github/ISSUE_TEMPLATE/**"
  
  schedule:
    - cron: '0 0 * * 0'  # Weekly security scans
  
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
          - development

# Define environment variables
env:
  NODE_ENV: production
  NEXT_TELEMETRY_DISABLED: 1
  FORCE_COLOR: 3
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

# Define permissions
permissions:
  contents: read
  pages: write
  id-token: write
  issues: write
  pull-requests: write
  security-events: write

# Allow only one concurrent deployment per environment
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  # Dependency installation and validation
  setup:
    name: 🔧 Setup & Dependency Validation
    runs-on: ubuntu-latest
    outputs:
      package-manager: ${{ steps.detect-package-manager.outputs.manager }}
      package-command: ${{ steps.detect-package-manager.outputs.command }}
      package-runner: ${{ steps.detect-package-manager.outputs.runner }}
      cache-hit: ${{ steps.node-modules-cache.outputs.cache-hit }}
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 🔍 Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install --frozen-lockfile" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/pnpm-lock.yaml" ]; then
            echo "manager=pnpm" >> $GITHUB_OUTPUT
            echo "command=install --frozen-lockfile" >> $GITHUB_OUTPUT
            echo "runner=pnpm" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package-lock.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            exit 0
          fi
      
      - name: ⚙️ Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: ${{ steps.detect-package-manager.outputs.manager }}
      
      - name: 📦 Cache node_modules
        uses: actions/cache@v4
        id: node-modules-cache
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json', '**/yarn.lock', '**/pnpm-lock.yaml') }}-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json', '**/yarn.lock', '**/pnpm-lock.yaml') }}-
            ${{ runner.os }}-node-modules-
      
      - name: 📦 Install dependencies
        if: steps.node-modules-cache.outputs.cache-hit != 'true'
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
      
      - name: 📋 Validate dependencies
        run: |
          echo "Validating dependency tree..."
          ${{ steps.detect-package-manager.outputs.manager }} list --depth=0
          echo "✅ Dependency validation complete"
  
  # Security scanning
  security:
    name: 🛡️ Security Scanning
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
      
      - name: ⚙️ Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
      
      - name: 📦 Restore node_modules
        uses: actions/cache@v4
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json', '**/yarn.lock', '**/pnpm-lock.yaml') }}-${{ hashFiles('**/package.json') }}
      
      - name: 🔒 Run npm audit for vulnerabilities
        run: ${{ needs.setup.outputs.package-manager }} audit --production || true
      
      - name: 🧪 Run CodeQL analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript
      
      - name: 🔍 Run CodeQL analysis
        uses: github/codeql-action/analyze@v2
      
      - name: 🕵️ Scan for secrets
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
      
      - name: 📊 Generate security report
        if: always()
        run: |
          echo "## Security Scan Results" > security-report.md
          echo "- CodeQL Analysis: ${{ job.status }}" >> security-report.md
          echo "- Secrets Scanning: ${{ job.status }}" >> security-report.md
          echo "- Dependency Audit: ${{ job.status }}" >> security-report.md
      
      - name: 📤 Upload security report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: security-report.md
          retention-days: 30

# ... existing code ... 